import { ChangeDetectorRef, EventEmitter, OnInit } from '@angular/core';
import { AlertConfig } from './alert.config';
import * as ɵngcc0 from '@angular/core';
export declare class AlertComponent implements OnInit {
    private changeDetection;
    /** Alert type.
     * Provides one of four bootstrap supported contextual classes:
     * `success`, `info`, `warning` and `danger`
     */
    type: string;
    /** If set, displays an inline "Close" button */
    dismissible: boolean;
    /** Number in milliseconds, after which alert will be closed */
    dismissOnTimeout: number | string;
    /** Is alert visible */
    isOpen: boolean;
    /** This event fires immediately after close instance method is called,
     * $event is an instance of Alert component.
     */
    onClose: EventEmitter<AlertComponent>;
    /** This event fires when alert closed, $event is an instance of Alert component */
    onClosed: EventEmitter<AlertComponent>;
    classes: string;
    dismissibleChange: EventEmitter<boolean>;
    constructor(_config: AlertConfig, changeDetection: ChangeDetectorRef);
    ngOnInit(): void;
    /**
     * Closes an alert by removing it from the DOM.
     */
    close(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AlertComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<AlertComponent, "alert,bs-alert", never, { "type": "type"; "dismissible": "dismissible"; "isOpen": "isOpen"; "dismissOnTimeout": "dismissOnTimeout"; }, { "onClose": "onClose"; "onClosed": "onClosed"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxlcnQuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImFsZXJ0LmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7QUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUEyQkEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgRXZlbnRFbWl0dGVyLCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFsZXJ0Q29uZmlnIH0gZnJvbSAnLi9hbGVydC5jb25maWcnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQWxlcnRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIHByaXZhdGUgY2hhbmdlRGV0ZWN0aW9uO1xuICAgIC8qKiBBbGVydCB0eXBlLlxuICAgICAqIFByb3ZpZGVzIG9uZSBvZiBmb3VyIGJvb3RzdHJhcCBzdXBwb3J0ZWQgY29udGV4dHVhbCBjbGFzc2VzOlxuICAgICAqIGBzdWNjZXNzYCwgYGluZm9gLCBgd2FybmluZ2AgYW5kIGBkYW5nZXJgXG4gICAgICovXG4gICAgdHlwZTogc3RyaW5nO1xuICAgIC8qKiBJZiBzZXQsIGRpc3BsYXlzIGFuIGlubGluZSBcIkNsb3NlXCIgYnV0dG9uICovXG4gICAgZGlzbWlzc2libGU6IGJvb2xlYW47XG4gICAgLyoqIE51bWJlciBpbiBtaWxsaXNlY29uZHMsIGFmdGVyIHdoaWNoIGFsZXJ0IHdpbGwgYmUgY2xvc2VkICovXG4gICAgZGlzbWlzc09uVGltZW91dDogbnVtYmVyIHwgc3RyaW5nO1xuICAgIC8qKiBJcyBhbGVydCB2aXNpYmxlICovXG4gICAgaXNPcGVuOiBib29sZWFuO1xuICAgIC8qKiBUaGlzIGV2ZW50IGZpcmVzIGltbWVkaWF0ZWx5IGFmdGVyIGNsb3NlIGluc3RhbmNlIG1ldGhvZCBpcyBjYWxsZWQsXG4gICAgICogJGV2ZW50IGlzIGFuIGluc3RhbmNlIG9mIEFsZXJ0IGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICBvbkNsb3NlOiBFdmVudEVtaXR0ZXI8QWxlcnRDb21wb25lbnQ+O1xuICAgIC8qKiBUaGlzIGV2ZW50IGZpcmVzIHdoZW4gYWxlcnQgY2xvc2VkLCAkZXZlbnQgaXMgYW4gaW5zdGFuY2Ugb2YgQWxlcnQgY29tcG9uZW50ICovXG4gICAgb25DbG9zZWQ6IEV2ZW50RW1pdHRlcjxBbGVydENvbXBvbmVudD47XG4gICAgY2xhc3Nlczogc3RyaW5nO1xuICAgIGRpc21pc3NpYmxlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj47XG4gICAgY29uc3RydWN0b3IoX2NvbmZpZzogQWxlcnRDb25maWcsIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0b3JSZWYpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQ2xvc2VzIGFuIGFsZXJ0IGJ5IHJlbW92aW5nIGl0IGZyb20gdGhlIERPTS5cbiAgICAgKi9cbiAgICBjbG9zZSgpOiB2b2lkO1xufVxuIl19